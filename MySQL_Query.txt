mysql start command:
mysql -u root -p 
passward:Pass@123

1**************************************************************************************************
CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(255) NOT NULL,
    balance DECIMAL(10,2),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Branch (
    branch_name VARCHAR(255) PRIMARY KEY,
    branch_city VARCHAR(255),
    assets DECIMAL(12,2)
);

CREATE TABLE Customer (
    cust_name VARCHAR(255) PRIMARY KEY,
    cust_street VARCHAR(255),
    cust_city VARCHAR(255)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(255),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(255),
    amount DECIMAL(10,2),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(255),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

1)Find the names of all branches in the loan relation.
  SELECT DISTINCT branch_name FROM Loan;

2)Find all loan numbers for loans made at „Wadia College‟ Branch with loan amount > 12000.
  SELECT loan_no FROM Loan WHERE branch_name = 'Wadia College' AND amount > 12000;

3)Find all customers who have a loan from the bank. Find their names, loan_no, and loan amount.
  SELECT C.cust_name, B.loan_no, L.amount
  FROM Customer C
  JOIN Borrower B ON C.cust_name = B.cust_name
  JOIN Loan L ON B.loan_no = L.loan_no;

4)List all customers in alphabetical order who have a loan from „Wadia College‟ branch.
SELECT C.cust_name
FROM Customer C
JOIN Borrower B ON C.cust_name = B.cust_name
JOIN Loan L ON B.loan_no = L.loan_no
WHERE L.branch_name = 'Wadia College'
ORDER BY C.cust_name;

5)Display distinct cities of the branch.
SELECT DISTINCT branch_city FROM Branch;

2**************************************************************************************************
1)Find all customers who have both account and loan at the bank.
SELECT DISTINCT C.cust_name
FROM Customer C
JOIN Depositor D ON C.cust_name = D.cust_name
JOIN Borrower B ON C.cust_name = B.cust_name;

2)Find all customers who have an account or loan or both at the bank.
SELECT DISTINCT C.cust_name
FROM Customer C
LEFT JOIN Depositor D ON C.cust_name = D.cust_name
LEFT JOIN Borrower B ON C.cust_name = B.cust_name
WHERE D.cust_name IS NOT NULL OR B.cust_name IS NOT NULL;

3)Find all customers who have an account but no loan at the bank.
SELECT DISTINCT C.cust_name
FROM Customer C
LEFT JOIN Depositor D ON C.cust_name = D.cust_name
LEFT JOIN Borrower B ON C.cust_name = B.cust_name
WHERE D.cust_name IS NOT NULL AND B.cust_name IS NULL;

4)Find the average account balance at „Wadia College‟ branch.
SELECT AVG(balance) AS average_balance
FROM Account
WHERE branch_name = 'Wadia College';

5)Find the number of depositors at each branch.
SELECT branch_name, COUNT(DISTINCT cust_name) AS num_depositors
FROM Depositor
GROUP BY branch_name;
3**************************************************************************************************
1)Find the branches where average account balance > 15000.
SELECT branch_name
FROM Account
GROUP BY branch_name
HAVING AVG(balance) > 15000;

2)Find the number of tuples in the customer relation.
SELECT COUNT(*) AS num_tuples
FROM Customer;

3)Calculate the total loan amount given by the bank.
SELECT SUM(amount) AS total_loan_amount
FROM Loan;

4)Delete all loans with a loan amount between 1300 and 1500.
DELETE FROM Loan
WHERE amount BETWEEN 1300 AND 1500;

5)Find the average account balance at each branch.
SELECT branch_name, AVG(balance) AS average_balance
FROM Account
GROUP BY branch_name;

6)Find the name of the customer and city where the customer name starts with the letter P.
SELECT cust_name, cust_city
FROM Customer
WHERE cust_name LIKE 'P%';

4**************************************************************************************************

-- Create table Cust_Master
CREATE TABLE Cust_Master (
    Cust_no INT PRIMARY KEY,
    Cust_name VARCHAR(255) NOT NULL,
    Cust_addr VARCHAR(255) NOT NULL
);

-- Create table Order
CREATE TABLE Order (
    Order_no INT PRIMARY KEY,
    Cust_no INT,
    Order_date DATE NOT NULL,
    Qty_Ordered INT,
    FOREIGN KEY (Cust_no) REFERENCES Cust_Master(Cust_no)
);

-- Create table Product
CREATE TABLE Product (
    Product_no INT PRIMARY KEY,
    Product_name VARCHAR(255) NOT NULL,
    Order_no INT,
    FOREIGN KEY (Order_no) REFERENCES Order(Order_no)
);

-- Insert records into Cust_Master
INSERT INTO Cust_Master (Cust_no, Cust_name, Cust_addr) VALUES
(1001, 'Customer1', 'Address1'),
(1002, 'Customer2', 'Address2'),
(1003, 'Customer3', 'Address3'),
(1004, 'Customer4', 'Address4'),
(1005, 'Customer5', 'Address5'),
(1006, 'Customer6', 'Address6'),
(1007, 'Customer7', 'Address7'),
(1008, 'Customer8', 'Address8');

-- Insert records into Order
INSERT INTO Order (Order_no, Cust_no, Order_date, Qty_Ordered) VALUES
(1, 1001, '2023-01-01', 5),
(2, 1002, '2023-02-01', 8),
(3, 1003, '2023-03-01', 10),
(4, 1004, '2023-04-01', 3),
(5, 1005, '2023-05-01', 6);

-- Insert records into Product
INSERT INTO Product (Product_no, Product_name, Order_no) VALUES
(101, 'ProductA', 1),
(102, 'ProductB', 2),
(103, 'ProductC', 3),
(104, 'ProductD', 4),
(105, 'ProductE', 5);

1)List names of customers having 'A' as the second letter in their name.
SELECT Cust_name
FROM Cust_Master
WHERE Cust_name LIKE '_A%';

2)Display orders from Customer no C1002, C1005, C1007, and C1008.
SELECT * FROM Order
WHERE Cust_no IN (1002, 1005, 1007, 1008);

3)List clients who stay in either 'Bangalore' or 'Mangalore'.
SELECT * FROM Cust_Master
WHERE Cust_addr IN ('Bangalore', 'Mangalore');

4)Display the name of customers and the product_name they have purchased.
SELECT C.Cust_name, P.Product_name
FROM Cust_Master C
JOIN Order O ON C.Cust_no = O.Cust_no
JOIN Product P ON O.Order_no = P.Order_no;

5)Create view View1 consisting of Cust_name, Product_name.
CREATE VIEW View1 AS
SELECT C.Cust_name, P.Product_name
FROM Cust_Master C
JOIN Order O ON C.Cust_no = O.Cust_no
JOIN Product P ON O.Order_no = P.Order_no;

6)Display product_name and quantity purchased by each customer.
SELECT C.Cust_name, P.Product_name, O.Qty_Ordered
FROM Cust_Master C
JOIN Order O ON C.Cust_no = O.Cust_no
JOIN Product P ON O.Order_no = P.Order_no;

7)Perform different join operations.

INNER JOIN:
SELECT * FROM Cust_Master
INNER JOIN Order ON Cust_Master.Cust_no = Order.Cust_no;

LEFT JOIN:
SELECT * FROM Cust_Master
LEFT JOIN Order ON Cust_Master.Cust_no = Order.Cust_no;

RIGHT JOIN:
SELECT * FROM Cust_Master
RIGHT JOIN Order ON Cust_Master.Cust_no = Order.Cust_no;

FULL OUTER JOIN:
SELECT * FROM Cust_Master
FULL OUTER JOIN Order ON Cust_Master.Cust_no = Order.Cust_no;
5**************************************************************************************************
-- Create table Employee
CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    employee_name VARCHAR(255) NOT NULL,
    street VARCHAR(255),
    city VARCHAR(255),
    UNIQUE (employee_name)
);

-- Create table Works
CREATE TABLE Works (
    employee_name VARCHAR(255),
    company_name VARCHAR(255),
    salary DECIMAL(10,2),
    PRIMARY KEY (employee_name, company_name),
    FOREIGN KEY (employee_name) REFERENCES Employee(employee_name)
);

-- Create table Company
CREATE TABLE Company (
    company_name VARCHAR(255) PRIMARY KEY,
    city VARCHAR(255),
    asset DECIMAL(12,2)
);

-- Create table Manages
CREATE TABLE Manages (
    employee_name VARCHAR(255),
    manager_name VARCHAR(255),
    PRIMARY KEY (employee_name),
    FOREIGN KEY (employee_name) REFERENCES Employee(employee_name),
    FOREIGN KEY (manager_name) REFERENCES Employee(employee_name)
);

1)Find the names of all employees who work for 'TCS'.
SELECT employee_name
FROM Works
WHERE company_name = 'TCS';

2)Find the names and company names of all employees sorted in ascending order of 
company name and descending order of employee names of that company.
SELECT W.employee_name, W.company_name
FROM Works W
JOIN Company C ON W.company_name = C.company_name
ORDER BY W.company_name ASC, W.employee_name DESC;

3)Change the city of the employee working with InfoSys to 'Bangalore'.
UPDATE Employee
SET city = 'Bangalore'
WHERE employee_name IN (SELECT employee_name FROM Works WHERE company_name = 'InfoSys');

4)Find the names, street address, and cities of residence for all employees who work for 'TechM' and earn more than $10,000.
SELECT E.employee_name, E.street, E.city
FROM Employee E
JOIN Works W ON E.employee_name = W.employee_name
WHERE W.company_name = 'TechM' AND W.salary > 10000;

5)Add a column Asset to the Company table.
ALTER TABLE Company
ADD COLUMN Asset DECIMAL(12,2);

6**************************************************************************************************
1)Change the city of the employee working with InfoSys to 'Bangalore'
UPDATE Employee
SET city = 'Bangalore'
WHERE employee_name IN (SELECT employee_name FROM Works WHERE company_name = 'InfoSys');

2)Find the names of all employees who earn more than the average salary of all employees of their company.
SELECT E.employee_name
FROM Employee E
JOIN Works W ON E.employee_name = W.employee_name
WHERE W.salary > (SELECT AVG(salary) FROM Works WHERE company_name = W.company_name);

3)Find the names, street address, and cities of residence for all employees who work for 'TechM' and earn more than $10,000.
SELECT E.employee_name, E.street, E.city
FROM Employee E
JOIN Works W ON E.employee_name = W.employee_name
WHERE W.company_name = 'TechM' AND W.salary > 10000;

4)Change the name of the table Manages to Management
ALTER TABLE Manages RENAME TO Management;

5)Create a simple and unique index on the employee table
CREATE UNIQUE INDEX idx_employee_name ON Employee(employee_name);

6)Display index information
SHOW INDEX FROM Employee;
7**************************************************************************************************
1)Create a View1 to display List all customers in alphabetical order who have loan from 
Pune_Station branch.
CREATE VIEW view1 AS SELECT b.cname from borrower b,loan l WHERE l.bname='STATION' AND l.lno=b.lno OREDER BY b.cname;

2)Create View2 on branch table by selecting any two columns and perform insert
update delete operations.

mysql> CREATE VIEW view2 as select bname ,assets from branch;

mysql> select * from view2;

mysql> insert into view2 values("WISHRANTWADI",100000);

mysql> insert into view2 values("SWARGETE",1200000);

mysql> select * from view2;

mysql> update view2 set assets=120000 where bname="WISHRANTWADI";

mysql> delete from view2 where bname='SWARGETE';

mysql> SELECT * FROM view2;


3)Create View3 on borrower and depositor table by selecting any one column from each 
table perform insert update delete operations.

create view view3 as select d.cname,b.lno from depositer d,borrower b where d.cname=b.cname;

insert into view3(cname,lno) values('ASHISH SHISAL',104);

insert into view3(cname,lno) values('SAURABH BUTALE',305);

update view3 set lno=307 where cname='APOORV SHAH';

delete from view3 where cname='ADESH PARDESHI';

SELECT * FROM view3;


4)Create Union of left and right joint for all customers who have an account or loan or 
both at bank
select c.cname from customer c left join depositor d on c.cname=d.cname union select b.cname from borrower b right join loan l on b.lno=l.lno;

5)Create Simple and Unique index.
mysql> create index idxonbranch on branch(bname);

mysql> create unique index idxoncustomer on customer(cname);

6)Display index Information 
mysql> show indexes from branch;
8)**************************************************************************************************
-- Create tables
CREATE TABLE Companies (
    comp_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    cost DECIMAL(10,2),
    year INT
);

CREATE TABLE Orders (
    comp_id INT,
    domain VARCHAR(255),
    quantity INT,
    PRIMARY KEY (comp_id, domain),
    FOREIGN KEY (comp_id) REFERENCES Companies(comp_id)
);

Insert some sample data
INSERT INTO Companies (comp_id, name, cost, year) VALUES
(1, 'Company1', 5000.00, 2020),
(2, 'Company2', 8000.00, 2019),
(3, 'Company3', 6000.00, 2021);

INSERT INTO Orders (comp_id, domain, quantity) VALUES
(1, 'Domain1', 100),
(2, 'Domain2', 50),
(3, 'Domain3', 200);

1) Find names, costs, domains, and quantities for companies using inner join.
SELECT C.name, C.cost, O.domain, O.quantity
FROM Companies C
INNER JOIN Orders O ON C.comp_id = O.comp_id;

2) Find names, costs, domains, and quantities for companies using left outer join.
SELECT C.name, C.cost, O.domain, O.quantity
FROM Companies C
LEFT OUTER JOIN Orders O ON C.comp_id = O.comp_id;

3) Find names, costs, domains, and quantities for companies using right outer join.
SELECT C.name, C.cost, O.domain, O.quantity
FROM Companies C
RIGHT OUTER JOIN Orders O ON C.comp_id = O.comp_id;

4) Find names, costs, domains, and quantities for companies using Union operator.
mysql> select c.name,c.cost,o.domain,o.quantity from companies c right join orders o on c.comp_id=o.comp_id 
     >union 
     >select c.name,c.cost,o.domain,o.quantity from companies c left join orders o on c.comp_id=o.comp_id;

5) Create View View1 by selecting both tables to show company name and quantities.
CREATE VIEW View1 AS
SELECT C.name, O.quantity
FROM Companies C
LEFT JOIN Orders O ON C.comp_id = O.comp_id;

6) Create View View2 by selecting any two columns and perform insert update delete operations.
CREATE VIEW View2 AS
SELECT comp_id, name
FROM Companies;

7) Display content of View1, View2.
SELECT * FROM View1;

SELECT * FROM View2;
9)**************************************************************************************************
-- Create table CUSTOMERS
CREATE TABLE CUSTOMERS (
    CNo INT PRIMARY KEY,
    Cname VARCHAR(255) NOT NULL,
    Ccity VARCHAR(255),
    CMobile VARCHAR(15) NOT NULL
);

-- Create table ITEMS
CREATE TABLE ITEMS (
    INo INT PRIMARY KEY,
    Iname VARCHAR(255) NOT NULL,
    Itype VARCHAR(255),
    Iprice DECIMAL(10,2) NOT NULL,
    Icount INT
);

-- Create table PURCHASE
CREATE TABLE PURCHASE (
    PNo INT PRIMARY KEY,
    Pdate DATE NOT NULL,
    Pquantity INT,
    Cno INT,
    INo INT,
    FOREIGN KEY (Cno) REFERENCES CUSTOMERS(CNo),
    FOREIGN KEY (INo) REFERENCES ITEMS(INo)
);

-- Insert sample data into CUSTOMERS
INSERT INTO CUSTOMERS (CNo, Cname, Ccity, CMobile) VALUES
(1, 'Gopal', 'City1', '1234567890'),
(2, 'Maya', 'City2', '9876543210'),
(3, 'John', 'City1', '5678901234');

-- Insert sample data into ITEMS
INSERT INTO ITEMS (INo, Iname, Itype, Iprice, Icount) VALUES
(101, 'Pen', 'Stationary', 5.00, 100),
(102, 'Notebook', 'Stationary', 50.00, 50),
(103, 'Mobile', 'Electronics', 800.00, 10),
(104, 'Stapler', 'Stationary', 20.00, 30);

-- Insert sample data into PURCHASE
INSERT INTO PURCHASE (PNo, Pdate, Pquantity, Cno, INo) VALUES
(1, '2023-01-01', 2, 1, 101),
(2, '2023-02-01', 1, 2, 103),
(3, '2023-03-01', 3, 3, 102),
(4, '2023-04-01', 1, 1, 104);

1) List all stationary items with a price between 400/- to 1000/-
SELECT * FROM ITEMS
WHERE Itype = 'Stationary' AND Iprice BETWEEN 400.00 AND 1000.00;

2) Change the mobile number of customer “Gopal”
UPDATE CUSTOMERS
SET CMobile = '9999999999'
WHERE Cname = 'Gopal';

3) Display the item with the maximum price
SELECT * FROM ITEMS
WHERE Iprice = (SELECT MAX(Iprice) FROM ITEMS);

4) Display all purchases sorted from the most recent to the oldest
SELECT * FROM PURCHASE
ORDER BY Pdate DESC;

5) Count the number of customers in every city
SELECT Ccity, COUNT(*) AS CustomerCount
FROM CUSTOMERS
GROUP BY Ccity;

6) Display all purchased quantity of Customer Maya
SELECT P.Pquantity, I.Iname
FROM PURCHASE P
JOIN ITEMS I ON P.INo = I.INo
JOIN CUSTOMERS C ON P.Cno = C.CNo
WHERE C.Cname = 'Maya';

7) Create a view that shows Iname, Price, and Count of all stationary items in descending order of price
CREATE VIEW StationaryItemsView AS
SELECT Iname, Iprice, Icount
FROM ITEMS
WHERE Itype = 'Stationary'
ORDER BY Iprice DESC;
***************************************************************************************************


